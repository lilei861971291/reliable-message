server:
  port: 8086
netty:
  server:
    port: 9999
spring:
  cloud:
    nacos:
      discovery:
        metadata: {"version":@version@}
  kafka:
    bootstrap-servers: 10.33.80.101:9092

feign:
  hystrix:
    enabled: true #默认feign是不开启hystrix的，所以要设置该配置为true

management:
  security:
    enabled: false

info:
  version: "@project.version@"
  app:
   name: "@artifactId@"
mybatis:
  mapper-locations: classpath*:mapper/*Mapper.xml
  type-aliases-package: com.reliable.message.client.server.domain  #配置别名作用（如果在mapper 中不写简称，可以不配置这个）





elastic:
  job:
    zookeeper:
      addressList: 10.33.80.101:2181
      namespace: elastic-job-${spring.application.name}
    cron:
      confirmFinishMessageClearCron: 0 0 0 * * ? *
      waitConfirmMessageJobCron: 0 0 0 * * ? *
      sendingMessageCron: 0 0 0 * * ? *





sharding:
  jdbc:
    dataSource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.33.80.101:3306/reliable_message0?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
        username: root
        password: 123456
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.33.80.101:3306/reliable_message1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
        username: root
        password: 123456


    config:
      sharding:
        bindingTables: message,message_confirm
        tables:
          message:
            actualDataNodes: ds${0..1}.message${0..1}
            databaseStrategy:
              inline:
                shardingColumn: id
                algorithmExpression: ds${Math.abs(id.hashCode() % 2)}
            tableStrategy:
              inline:
                shardingColumn: producer_message_id
                algorithmExpression: message${Math.abs(producer_message_id.hashCode() % 2)}
            keyGenerator:
              column: id
          message_confirm:
            actualDataNodes: ds${0..1}.message_confirm${0..1}
            databaseStrategy:
              inline:
                shardingColumn: message_id
                algorithmExpression: ds${Math.abs(message_id.hashCode() % 2)}
            tableStrategy:
              inline:
                shardingColumn: producer_message_id
                algorithmExpression: message_confirm${Math.abs(producer_message_id.hashCode() % 2)}
            keyGenerator:
              column: id
#      props:
#        sql:
#          show: true




